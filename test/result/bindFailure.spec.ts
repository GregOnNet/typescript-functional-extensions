import { Result } from '@/src/result';

describe('Result', () => {
  describe('bindFailure', () => {
    test('takes the result from the second result, when previous result fails', () => {
      const sut = Result.failure('ðŸ’¥');

      expect(sut.bindFailure(() => Result.success('âœ…'))).toSucceedWith('âœ…');
    });

    test('takes the result from the first result, when it succeeds', () => {
      const sut = Result.success('âœ…');

      expect(sut.bindFailure(() => Result.failure('ðŸ’¥'))).toSucceedWith('âœ…');
    });

    test('takes the failure from the second result, when both fail', () => {
      const sut = Result.failure('ðŸ’¥');

      expect(sut.bindFailure(() => Result.failure('ðŸ’¥ðŸ’¥'))).toFailWith('ðŸ’¥ðŸ’¥');
    });

    test('calls projection with first result error', () => {
      const sut = Result.failure('ðŸ’¥');
      const projection = vi.fn(() => Result.success('âœ…'));

      sut.bindFailure(projection);
      expect(projection).toBeCalledWith('ðŸ’¥');
    });
  });
});
