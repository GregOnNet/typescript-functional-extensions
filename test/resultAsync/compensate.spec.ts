import { Result } from '@/src/result';
import { ResultAsync } from '@/src/resultAsync';

describe('ResultAsync', () => {
  describe('compensate', () => {
    test('takes the result from the second result, when previous result fails', async () => {
      const sut = ResultAsync.failure('ðŸ’¥');

      const innerResult = await sut
        .compensate(() => Result.success('âœ…'))
        .toPromise();

      return expect(innerResult).toSucceedWith('âœ…');
    });

    test('takes the result from the first result, when it succeeds', async () => {
      const sut = ResultAsync.success('âœ…');

      const innerResult = await sut
        .compensate(() => Result.failure('ðŸ’¥'))
        .toPromise();

      return expect(innerResult).toSucceedWith('âœ…');
    });

    test('takes the failure from the second result, when both fail', async () => {
      const sut = ResultAsync.failure('ðŸ’¥');

      const innerResult = await sut
        .compensate(() => Result.failure('ðŸ’¥ðŸ’¥'))
        .toPromise();

      return expect(innerResult).toFailWith('ðŸ’¥ðŸ’¥');
    });

    test('takes the result from the second result, when previous result fails', async () => {
      const sut = ResultAsync.failure('ðŸ’¥');

      const innerResult = await sut
        .compensate(() => ResultAsync.success('âœ…'))
        .toPromise();

      return expect(innerResult).toSucceedWith('âœ…');
    });

    test('takes the result from the first result, when it succeeds', async () => {
      const sut = ResultAsync.success('âœ…');

      const innerResult = await sut
        .compensate(() => ResultAsync.failure('ðŸ’¥'))
        .toPromise();

      return expect(innerResult).toSucceedWith('âœ…');
    });

    test('takes the failure from the second result, when both fail', async () => {
      const sut = ResultAsync.failure('ðŸ’¥');

      const innerResult = await sut
        .compensate(() => ResultAsync.failure('ðŸ’¥ðŸ’¥'))
        .toPromise();

      return expect(innerResult).toFailWith('ðŸ’¥ðŸ’¥');
    });

    test('calls projection with first result error', async () => {
      const sut = ResultAsync.failure('ðŸ’¥');
      const projection = vi.fn(() => ResultAsync.success('âœ…'));

      await sut.compensate(projection).toPromise();
      expect(projection).toBeCalledWith('ðŸ’¥');
    });
  });
});
